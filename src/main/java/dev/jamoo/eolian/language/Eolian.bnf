throwaway ::= ""

e_value_character ::= e_letter | e_digit | '_'
e_letter          ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
e_digit           ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"


chunk   ::= [ '#version' <e_integer> ] { <unit> }
e_integer ::= e_digit*
value ::= e_value_character*
name_ns ::= value { '.' value }
name    ::= value
comment ::= '[[' any character ']]'

c_name_qual ::= '@c_name' '(' name ')'


unit ::= 'abstract'  class_hdr '{' [ comment ] { class_body       } '}'
     | 'class'     class_hdr '{' [ comment ] { class_body       } '}'
     | 'mixin'     mixin_hdr '{' [ comment ] { class_body_mixin } '}'
     | 'interface' iface_hdr '{' [ comment ] { class_body_iface } '}'
     | ('import' | 'parse') name ';'
     | 'type' { type_struct_attrs } name_ns ':' (type | struct | e_enum) ';'
         [ comment ]
     | 'function' { '@extern' | '@beta' | c_name_qual } name_ns '{'
         [ comment ] { method_body } '}'
     | 'const' { '@extern' | '@beta' | c_name_qual } name_ns ':'
         type '=' expr ';' [ comment ]
     | 'error' { '@extern' | '@beta' | c_name_qual } name_ns '='
        string ';' [ comment ]
     | struct
     | e_enum

type_complex_owning ::= 'array' | 'list' | 'future'
type_complex_view   ::= 'accesssor' | 'iterator' | 'slice' | 'rw_slice'

type ::= 'const' '(' type     ')'
     | error '(' name_ns { ',' name_ns } ')'
     | type_complex_owning '<' type [ '@move' ] '>'
     | type_complex_view '<' type '>'
     | name_ns

type_struct_attrs ::= '@extern' | '@beta' | c_name_qual | '@free' '(' name ')'

struct ::= 'struct' { type_struct_attrs } name_ns (';' | '{' [ comment ]
         { struct_field } '}')

struct_field ::= name ':' type { '@by_ref' | '@move' } ';' [ comment ]

e_enum ::= 'enum' { '@extern' | '@beta' | c_name_qual } name_ns '{'
       [ comment ] enum_field { ',' [ comment ] enum_field } [ comment ] '}'

enum_field ::= name [ '=' expr ]


expr ::= 'true' | 'false' | 'null' | number | string | character
     | expr binop expr | unop expr | name_ns

external number ::= isNumberLiteral

external string ::= isStringLiteral

external character ::= isCharacterLiteral

external binop ::= isBinaryOperator

external unop ::= isUnaryOperator




class_hdr ::= { '@beta' | c_name_qual }
            name_ns [ 'extends' name_ns ]
            [ 'implements' name_ns { ',' name_ns } ]
            [ 'composites' name_ns { ',' name_ns } ]

mixin_hdr ::= { '@beta' | c_name_qual }
            name_ns [ 'requires' name_ns { ',' name_ns } ]
            [ 'extends' name_ns { ',' name_ns } ]
            [ 'composites' name_ns { ',' name_ns } ]

iface_hdr ::= { '@beta' | c_name_qual }
            name_ns [ 'extends' name_ns { ',' name_ns } ]

class_body_common ::= 'event_c_prefix' ':' value ';'
                  | 'c_prefix'       ':' value ';'
                  | 'methods'       '{' { method | property } '}'
                  | 'events'        '{' { event             } '}'
                  | 'parts'         '{' { part              } '}'


class_body_data ::= 'data' ':' value ';'


class_body_impls ::= 'implements' '{' { impl } '}'


class_body_ctors ::= 'constructors' '{' { [ '.' ] name_ns [ '@optional' ] ';' } '}'


class_body ::= class_body_common
           | class_body_data
           | class_body_impls
           | class_body_ctors


class_body_iface ::= class_body_common
                 | 'implements' '{' { impl_common } '}'


class_body_mixin ::= class_body_common
                 | class_body_data
                 | class_body_impls


impl_common ::= 'class' '.' ('constructor' | 'destructor') ';'



impl_quals ::= '@auto' | '@empty'
impl_prop  ::= [ impl_quals ] [ comment ] ';'

impl ::= impl_common | [ impl_quals ] [ '.' ] name_ns
       ( '{' [ 'get' impl_prop ] [ 'set' impl_prop ] '}' | ';' [ comment ] )


event ::= name { ',' name } {
        '@private' | '@protected' | '@beta' | '@hot' | '@restart' }
        [ ':' type ] ';'


part ::= name [ '@beta' ] ':' name_ns ';' [ comment ]






method ::= name { '@protected' | '@const' | '@static' | '@beta' | '@pure_virtual' }
             '{' [ comment ] { method_body } '}'


method_body ::= return | 'params' '{' { param } '}'


property ::= '@property' name { '@protected' | '@static' | '@pure_virtual' | '@beta' } '{' { property_body } '}'


property_body ::= 'get' { '@pure_virtual' | '@protected' } '{' [ comment ] { return | 'keys' '{' { param_nodir } '}' | 'values' '{' { param_nodir } '}' } '}'
              | 'set' { '@pure_virtual' | '@protected' } '{' [ comment ] { return | 'keys' '{' { param_nodir } '}' | 'values' '{' { param_nodir } '}' } '}'
              | 'keys'   '{' { param_nodir } '}'
              | 'values' '{' { param_nodir } '}'


param_nodir ::= name ':' type [ '(' expr ')' ] [ {  '@by_ref' | '@move' | '@optional' } ]
              ';' [ comment ]


param ::= [ '@in' | '@out' | '@inout' ] param_nodir

return_suffix ::=  [ '(' expr ')' ] { '@no_unused' | '@move' | '@by_ref' } ';' [ comment ]


return ::= 'return' ':' type return_suffix

